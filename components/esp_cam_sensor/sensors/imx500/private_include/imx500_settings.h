/*
 * SPDX-FileCopyrightText: 2024 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#pragma once

#ifdef __cplusplus
extern "C" {
#endif

#include "imx500_regs.h"
#include "imx500_types.h"
#include "sdkconfig.h"
#include <stdint.h>

#define BIT(nr) (1UL << (nr)) ///< 位操作宏，返回指定位置的位值

///< 1920x1080分辨率30FPS的IDI时钟速率
#define IMX500_IDI_CLOCK_RATE_1920x1080_30FPS (500000000ULL)
///< 1920x1080分辨率30FPS的MIPI CSI线路速率
#define IMX500_MIPI_CSI_LINE_RATE_1920x1080_30FPS (IMX500_IDI_CLOCK_RATE_1920x1080_30FPS * 4)


#define IMX500_MIPI_CTRL00_CLOCK_LANE_GATE BIT(5)    ///< MIPI控制寄存器：时钟通道门控
#define IMX500_MIPI_CTRL00_LINE_SYNC_ENABLE BIT(4)   ///< MIPI控制寄存器：行同步使能
#define IMX500_MIPI_CTRL00_BUS_IDLE BIT(2)           ///< MIPI控制寄存器：总线空闲
#define IMX500_MIPI_CTRL00_CLOCK_LANE_DISABLE BIT(0) ///< MIPI控制寄存器：时钟通道禁用

/**
 * @brief IMX500 MIPI复位寄存器配置。
 */
static const imx500_reginfo_t imx500_mipi_reset_regs[] = {
    {0x0100, 0x00},           // enable sleep，启用睡眠模式
    // {IMX500_REG_DELAY, 0x0a}, // 延迟10ms
    {IMX500_REG_END, 0x00},   // 结束标志
};
static imx500_reginfo_t imx501_27m_1920x1080_crop_30fps[] = {
    // Power on sequence
    {0x0004, 0x00},
    {0x0007, 0x80},
    {0x0007, 0x00},
    {0x0005, 0x01},
    {0x0004, 0x01},
    {0x0004, 0x03},
    {0x0004, 0x07},
    {0x0005, 0x12},
    // {IMX501_TABLE_WAIT_MS, IMX501_WAIT_MS_STREAM},
    // common register
    {0xA700, 0x01},  // image only
    {0x0136, 0x1B},  // input clock 27M
    {0x0137, 0x00},  // input clock 27M
    {0x0305, 0x02},  // IVT PREDIV 
    {0x0306, 0x00},  // IVT MPY
    {0x0307, 0x9B},  // IVT MPY  2092.5M
    {0x030D, 0x02},  // IOP PREDIV
    {0x030E, 0x00},  // IOP MPY
    {0x030F, 0x2D},  // IOP MPY  607.5M
    // {0x030F, 0x4E},  // IOP MPY  1053M
    // {0x0340, 0x18},
    // {0x0341, 0x2C},
    // {0x0820, 0x10},  // MIPI RATE
    // {0x0821, 0x59},  // MIPI RATE
    {0x0820, 0x08},  // MIPI RATE   27 / 2 * 0x4E * 2
    {0x0821, 0x3A},  // MIPI RATE
    {0x0822, 0x00},
    {0x0823, 0x00},
    {0x3607, 0x01},
    {0x3E34, 0x00},
    {0x3E35, 0x01},
    {0x3E36, 0x01},
    {0x3E37, 0x00},
    {0x3E38, 0x01},
    {0x3E39, 0x01},
    {0x3E3A, 0x01},
    {0x3E3B, 0x00},

    {0x3F50, 0x00},  // normal streaming

    {0x3F56, 0x00},
    {0x3F57, 0xCA},
    {0x4BC0, 0x16},
    {0x7BA8, 0x00},
    {0x7BA9, 0x00},
    {0x886B, 0x00},
    // {0x0342, 0x23},
    // {0x0343, 0x40},
    {0x0112, 0x0A}, // 0x0A: 10bit, 0x08: 8bit
    {0x0113, 0x0A}, // 0x0A: 10bit, 0x08: 8bit
    {0x0114, 0x01}, // 0x01: 2lane, 0x00: 4lane
    {0x0202, 0x02}, // exposure  too long will affect the frame length, check 0x0350 register
    {0x0203, 0x94}, // exposure
    {0x0204, 0x03}, // again
    {0x0205, 0x56}, // again
    {0xBCF1, 0x00}, // EBD size
    // H2V2 Binning
    {0x0342, 0x44}, // Line Length: 17592
    {0x0343, 0xB8},
    // {0x0342, 0x24}, // Line Length: 9400
    // {0x0343, 0xB8},
    {0x3F56, 0x00},
    {0x3F57, 0xB8},
    {0x0340, 0x07}, // Frame Length:1548
    {0x0341, 0x0C},
    // {0x0340, 0x08}, // Frame Length:2212
    // {0x0341, 0xA4},
    {0x0900, 0x01}, // binning mode
    {0x0901, 0x22}, // 2x2 binning mode
    {0x034C, 0x07}, // Width: 1920
    {0x034D, 0x80},
    {0x034E, 0x04}, // Height: 1080
    {0x034F, 0x38},
    {0x040C, 0x07}, // Width: 1920
    {0x040D, 0x80},
    {0x040E, 0x04}, // Height: 1080
    {0x034F, 0x38},
    {IMX500_REG_END, 0x00}  // End of register list
};

static const imx500_reginfo_t o5647_input_24M_MIPI_2lane_raw10_1920x1080_30fps[] = {
    {0x3034, 0x1A},
    {0x3035, 0x21},
    {0x3036, 0x62}, //PLL multiplier
    {0x303c, 0x11}, //plls_sys_div
    {0x3106, 0xf5}, //PLL clock divider
    {0x3821, 0x02}, //vertical, bit1: flip, bit0: bining
    {0x3820, 0x00}, //horizontal, bit1: mirror, bit0: bining
    {0x3827, 0xec},
    {0x370c, 0x03},
    {0x3612, 0x5b},
    {0x3618, 0x04},
    {0x5000, 0xff}, // LENC en
    {0x583e, 0xf0}, // max gain
    {0x583f, 0x4f}, // min gain

    {0x5003, 0x08},
    {0x5a00, 0x08},
    {0x3000, 0x00},
    {0x3001, 0x00},
    {0x3002, 0x00},
    {0x3016, 0x08},
    {0x3017, 0xe0},
    {0x3018, 0x44}, //2 lane, MIPI
    {0x301c, 0xf8},
    {0x301d, 0xf0},
    {0x3a18, 0x03}, //gain_celling, max gain value
    {0x3a19, 0xff}, //gain_celling
    {0x3c00, 0x40},
    {0x3b07, 0x0c},
    {0x380c, 0x08}, //HTS = 2271
    {0x380d, 0xdf},
    {0x380e, 0x04}, //VTS = 1199
    {0x380f, 0xaf},
    {0x3814, 0x11}, //horizontal subsampling
    {0x3815, 0x11}, //vertical subsampling
    {0x3708, 0x64},
    {0x3709, 0x12},
    {0x3808, 0x07}, //x output size: 1920
    {0x3809, 0x80},
    {0x380a, 0x04}, //y output size: 1080
    {0x380b, 0x38},
    {0x3800, 0x01}, //x start = 0x15c = 348
    {0x3801, 0x5c},
    {0x3802, 0x01}, //y start = 0x1b2 = 434
    {0x3803, 0xb2},
    {0x3804, 0x08}, //x end = 0x8e3 = 2275, x size = 2275 - 348 +1 = 1928
    {0x3805, 0xe3},
    {0x3806, 0x05}, //y end = 0x5f1 = 1521, y size = 1521 - 434 + 1 = 1088
    {0x3807, 0xf1},
    {0x3811, 0x04}, //x offset: 4
    {0x3813, 0x02}, //y offset: 2
    {0x3630, 0x2e},
    {0x3632, 0xe2},
    {0x3633, 0x23},
    {0x3634, 0x44},
    {0x3636, 0x06},
    {0x3620, 0x64},
    {0x3621, 0xe0},
    {0x3600, 0x37},
    {0x3704, 0xa0},
    {0x3703, 0x5a},
    {0x3715, 0x78},
    {0x3717, 0x01},
    {0x3731, 0x02},
    {0x370b, 0x60},
    {0x3705, 0x1a},
    {0x3f05, 0x02},
    {0x3f06, 0x10},
    {0x3f01, 0x0a},

    {0x3a08, 0x01}, //AEC control, 50Hz step
    {0x3a09, 0x4b},
    {0x3a0a, 0x01}, //60Hz step
    {0x3a0b, 0x13},
    {0x3a0d, 0x04},
    {0x3a0e, 0x03},
    {0x3a0f, 0x58},
    {0x3a10, 0x50},
    {0x3a1b, 0x58},
    {0x3a1e, 0x50},
    {0x3a11, 0x60},
    {0x3a1f, 0x28},
    {0x4001, 0x02},
    {0x4004, 0x04}, //blc line number
    {0x4000, 0x09},
    {0x4837, 0x19},
    {0x4800, 0x34},
    {0xffff, 0x00},
};

#ifdef __cplusplus
}
#endif
